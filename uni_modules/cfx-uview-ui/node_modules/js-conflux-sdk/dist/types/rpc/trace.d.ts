export = Trace;
declare class Trace extends RPCMethodFactory {
    static methods(): {
        method: string;
        alias: string;
        requestFormatters: any[];
        responseFormatter: any;
    }[];
    constructor(conflux: any);
}
declare namespace Trace {
    export { ActionCall, ActionCallResult, ActionCreate, ActionCreateResult, ActionInternal, Action, Trace, TraceFilter };
}
import RPCMethodFactory = require("./index");
type ActionCall = {
    space: string;
    from: string;
    to: string;
    value: BigInt;
    callType: string;
    input: string;
    gas: BigInt;
};
type ActionCallResult = {
    space: string;
    returnData: string;
    gasLeft: BigInt;
};
type ActionCreate = {
    space: string;
    from: string;
    init: string;
    value: BigInt;
    gas: BigInt;
    createType: string;
};
type ActionCreateResult = {
    outcome: string;
    returnData: string;
    gasLeft: BigInt;
    addr: string;
};
type ActionInternal = {
    from: string;
    to: string;
    fromPocket: string;
    toPocket: string;
    value: BigInt;
    fromSpace: string;
    toSpace: string;
};
type Action = ActionCall | ActionCallResult | ActionCreate | ActionCreateResult | ActionInternal;
type Trace = {
    action: Action;
    epochNumber: number;
    epochHash: string;
    blockHash: string;
    transactionHash: string;
    transactionPosition: string;
    type: string;
    valid: boolean;
};
type TraceFilter = {
    fromEpoch?: number;
    toEpoch?: number;
    fromAddress?: string | string[];
    toAddress?: string | string[];
    blockHashes?: string[];
    after?: number;
    count?: number;
    actionTypes?: string[] | string;
};
//# sourceMappingURL=trace.d.ts.map