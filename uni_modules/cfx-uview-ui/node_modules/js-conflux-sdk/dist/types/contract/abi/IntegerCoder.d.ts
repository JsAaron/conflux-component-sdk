export = IntegerCoder;
declare class IntegerCoder extends BaseCoder {
    static from({ type, ...options }: {
        [x: string]: any;
        type: any;
    }): import("./IntegerCoder");
    constructor({ name, type, signed, bits }: {
        name: any;
        type: any;
        signed?: boolean;
        bits?: number;
    });
    type: string;
    signed: boolean;
    size: number;
    bound: any;
    /**
     * @param {number|JSBI|string} value - FIXME: it is not a good idea to accept string as number
     * @return {Buffer}
     */
    encode(value: number | JSBI | string): Buffer;
    /**
     * @param {import('../../util/HexStream')} stream
     * @return {BigInt}
     */
    decode(stream: import('../../util/HexStream')): BigInt;
}
declare namespace IntegerCoder {
    export { uIntCoder };
}
import BaseCoder = require("./BaseCoder");
import JSBI = require("typescript/lib/lib.es2020.bigint");
declare var uIntCoder: import("./IntegerCoder");
//# sourceMappingURL=IntegerCoder.d.ts.map