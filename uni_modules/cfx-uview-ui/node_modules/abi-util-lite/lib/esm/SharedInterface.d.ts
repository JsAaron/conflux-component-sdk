export interface JsonFragmentType {
    readonly name?: string;
    readonly indexed?: boolean;
    readonly type?: string;
    readonly components?: ReadonlyArray<JsonFragmentType>;
}
export interface JsonFragment {
    readonly name?: string;
    readonly type?: string;
    readonly anonymous?: boolean;
    readonly payable?: boolean;
    readonly constant?: boolean;
    readonly stateMutability?: string;
    readonly inputs?: ReadonlyArray<JsonFragmentType>;
    readonly outputs?: ReadonlyArray<JsonFragmentType>;
    readonly gas?: string;
}
export declare type ParseState = {
    allowArray?: boolean;
    allowName?: boolean;
    allowParams?: boolean;
    allowType?: boolean;
    readArray?: boolean;
};
export declare type ParseNode = {
    parent?: any;
    type?: string;
    name?: string;
    state?: ParseState;
    indexed?: boolean;
    components?: Array<ParseNode>;
};
//# sourceMappingURL=SharedInterface.d.ts.map