export = format;
declare function format(): any;
declare namespace format {
    const any: any;
    const uInt: any;
    const bigInt: any;
    const bigIntFromBuffer: any;
    const bigUInt: any;
    const bigUIntHex: any;
    const big: any;
    const fixed64: any;
    const epochNumber: any;
    const epochNumberOrUndefined: any;
    const hex: any;
    const hex40: any;
    const address: any;
    /**
     * create a address formatter with networkId info
     */
    function netAddress(networkId: any, verbose?: boolean): any;
    const hexAddress: any;
    const checksumAddress: any;
    const hex64: (arg0: string) => string;
    /**
     * @function blockHash
     * @param {string|Buffer} arg
     * @return {string} Hex string
     *
     * @example
     * > format.privateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')
     "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
     * > format.privateKey('0x0123456789012345678901234567890123456789')
     Error("not match hex64")
     */
    function blockHash(v: any): string;
    /**
     * @function transactionHash
     * @param {string|Buffer} arg
     * @return {string} Hex string
     *
     * @example
     * > format.privateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')
     "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
     * > format.privateKey('0x0123456789012345678901234567890123456789')
     Error("not match hex64")
     */
    function transactionHash(v: any): string;
    /**
     * @function privateKey
     * @param {string|Buffer} arg
     * @return {string} Hex string
     *
     * @example
     * > format.privateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')
     "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
     * > format.privateKey('0x0123456789012345678901234567890123456789')
     Error("not match hex64")
     */
    function privateKey(v: any): string;
    const publicKey: any;
    const hexBuffer: any;
    const bytes: any;
    const boolean: any;
    const keccak256: any;
}
//# sourceMappingURL=format.d.ts.map