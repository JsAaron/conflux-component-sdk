export = Parser.from;
declare function from(schema: any, options?: {}): any;
declare function Parser(func: any): {
    (...args: any[]): any;
    constructor: typeof Parser;
    $before: typeof $before;
    $parse: typeof $parse;
    $default: typeof $default;
    $after: typeof $after;
    $validate: typeof $validate;
    $or: typeof $or;
};
declare namespace Parser {
    function fromArray(schema: any, options: any): {
        (...args: any[]): any;
        constructor: typeof Parser;
        $before: typeof $before;
        $parse: typeof $parse;
        $default: typeof $default;
        $after: typeof $after;
        $validate: typeof $validate;
        $or: typeof $or;
    };
    function fromObject(schema: any, options: any): {
        (...args: any[]): any;
        constructor: typeof Parser;
        $before: typeof $before;
        $parse: typeof $parse;
        $default: typeof $default;
        $after: typeof $after;
        $validate: typeof $validate;
        $or: typeof $or;
    };
    function fromFunction(func: any, options: any): any;
    function fromValue(schema: any): {
        (...args: any[]): any;
        constructor: typeof Parser;
        $before: typeof $before;
        $parse: typeof $parse;
        $default: typeof $default;
        $after: typeof $after;
        $validate: typeof $validate;
        $or: typeof $or;
    };
}
declare function $before(func: any): {
    (...args: any[]): any;
    constructor: typeof Parser;
    $before: typeof $before;
    $parse: typeof $parse;
    $default: typeof $default;
    $after: typeof $after;
    $validate: typeof $validate;
    $or: typeof $or;
};
declare function $parse(func: any, condition?: any): any;
declare function $default(data: any): any;
declare function $after(func: any): {
    (...args: any[]): any;
    constructor: typeof Parser;
    $before: typeof $before;
    $parse: typeof $parse;
    $default: typeof $default;
    $after: typeof $after;
    $validate: typeof $validate;
    $or: typeof $or;
};
declare function $validate(func: any, name: any): any;
declare function $or(schema: any): {
    (...args: any[]): any;
    constructor: typeof Parser;
    $before: typeof $before;
    $parse: typeof $parse;
    $default: typeof $default;
    $after: typeof $after;
    $validate: typeof $validate;
    $or: typeof $or;
};
//# sourceMappingURL=parser.d.ts.map