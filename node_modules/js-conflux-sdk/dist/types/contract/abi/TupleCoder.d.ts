export = TupleCoder;
declare class TupleCoder extends BaseCoder {
    static from({ type, components, ...options }: {
        [x: string]: any;
        type: any;
        components: any;
    }, valueCoder: any): import("./TupleCoder");
    constructor({ name, coders }: {
        name: any;
        coders: any;
    });
    type: string;
    size: any;
    coders: any;
    dynamic: any;
    names: any;
    /** @type {object} */
    NamedTuple: object;
    /**
     * @param {array} array
     * @return {Buffer}
     */
    encode(array: any[]): Buffer;
    /**
     * @param {import('../../util/HexStream')} stream
     * @return {NamedTuple}
     */
    decode(stream: import('../../util/HexStream')): NamedTuple;
    encodeTopic(value: any): any;
    decodeTopic(hex: any): any;
}
declare namespace TupleCoder {
    export { pack, unpack };
}
import BaseCoder = require("./BaseCoder");
/**
 * @param {BaseCoder[]} coders
 * @param {array} array
 * @return {Buffer}
 */
declare function pack(coders: BaseCoder[], array: any[]): Buffer;
/**
 *
 * @param {BaseCoder[]} coders
 * @param {import('../../util/HexStream')} stream
 * @return {array}
 */
declare function unpack(coders: BaseCoder[], stream: import('../../util/HexStream')): any[];
//# sourceMappingURL=TupleCoder.d.ts.map