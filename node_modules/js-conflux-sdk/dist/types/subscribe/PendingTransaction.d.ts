export = PendingTransaction;
declare class PendingTransaction {
    /**
     * PendingTransaction constructor.
     * @param {import('../Conflux').Conflux} conflux
     * @param {function} func
     * @param {array} args
     * @return {PendingTransaction}
     */
    constructor(conflux: any, func: Function, args: any[]);
    conflux: any;
    func: Function;
    args: any[];
    promise: any;
    then(resolve: any, reject: any): Promise<any>;
    catch(callback: any): Promise<any>;
    finally(callback: any): Promise<any>;
    /**
     * Get transaction by hash.
     *
     * @param {object} [options]
     * @param {number} [options.delay=0] - Defer execute after `delay` ms.
     * @return {Promise<import('../rpc/types/formatter').Transaction|null>} See [Conflux.getTransactionByHash](#Conflux.js/getTransactionByHash)
     */
    get({ delay }?: {
        delay?: number;
    }): Promise<import('../rpc/types/formatter').Transaction | null>;
    /**
     * Async wait till transaction been mined.
     *
     * - blockHash !== null
     *
     * @param {object} [options]
     * @param {number} [options.delta=1000] - Loop transaction interval in ms.
     * @param {number} [options.timeout=60*1000] - Loop timeout in ms.
     * @return {Promise<import('../rpc/types/formatter').Transaction>} See [Conflux.getTransactionByHash](#Conflux.js/getTransactionByHash)
     */
    mined({ delta, timeout }?: {
        delta?: number;
        timeout?: number;
    }): Promise<import('../rpc/types/formatter').Transaction>;
    /**
     * Async wait till transaction been executed.
     *
     * - mined
     * - receipt !== null
     * - receipt.outcomeStatus === 0
     *
     * @param {object} [options]
     * @param {number} [options.delta=1000] - Loop transaction interval in ms.
     * @param {number} [options.timeout=5*60*1000] - Loop timeout in ms.
     * @return {Promise<import('../rpc/types/formatter').TransactionReceipt>} See [Conflux.getTransactionReceipt](#Conflux.js/getTransactionReceipt)
     */
    executed({ delta, timeout }?: {
        delta?: number;
        timeout?: number;
    }): Promise<import('../rpc/types/formatter').TransactionReceipt>;
    /**
     * Async wait till transaction been confirmed.
     *
     * - executed
     * - transaction block risk coefficient < threshold
     *
     * @param {object} [options]
     * @param {number} [options.delta=1000] - Loop transaction interval in ms.
     * @param {number} [options.timeout=30*60*1000] - Loop timeout in ms.
     * @param {number} [options.threshold=1e-8] - Number in range (0,1)
     * @return {Promise<import('../rpc/types/formatter').TransactionReceipt>} See [Conflux.getTransactionReceipt](#Conflux.js/getTransactionReceipt)
     */
    confirmed({ delta, timeout, threshold }?: {
        delta?: number;
        timeout?: number;
        threshold?: number;
    }): Promise<import('../rpc/types/formatter').TransactionReceipt>;
}
//# sourceMappingURL=PendingTransaction.d.ts.map